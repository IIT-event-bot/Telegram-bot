import logging

from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from interface.Statement import Statement

logger = logging.getLogger()
from aiogram.dispatcher import FSMContext

from rabbit.rabbitmq import instance_rabbit_client as rabbit
from interface.Icon import *
from interface.States import *

import re


async def start_message(message: Message):
    """—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ '
                         f'–±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ –æ –≥–ª–∞–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞. –ù–∞–∂–º–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" –∏'
                         f' –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É.', reply_markup=start_inline_keyboard())
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await rabbit.send_message_to_user_service(
        f'{{"method": "ADD_USER", "body": {{ "username": "{message.chat.username}", "id": {message.chat.id} }} }}')
    logger.info(f'user id: {message.from_user.id} /start')


def start_inline_keyboard() -> InlineKeyboardMarkup:
    create_statement_btn = InlineKeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ üóé', callback_data='create_statement')
    help_btn = InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')
    return InlineKeyboardMarkup(row_width=2).add(create_statement_btn, help_btn)


async def help_message(message: Message):
    """—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –∫–æ–º–∞–Ω–¥ /help"""
    await message.answer(f'–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=help_inline_keyboard())
    logger.info(f'user id: {message.from_user.id} /help')


def help_inline_keyboard() -> InlineKeyboardMarkup:
    create_statement_btn = InlineKeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', callback_data='create_statement')
    iit_contacts = InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã –ò–ò–¢', url='https://iit.csu.ru/')
    return InlineKeyboardMarkup(row_width=2).add(create_statement_btn, iit_contacts)


async def callback_query_statement(call: CallbackQuery, state: FSMContext):
    """–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"""
    await call.message.edit_text(
        text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø–∞".\n–ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω '
             '–ò–≤–∞–Ω–æ–≤–∏—á –ü—Ä–ò-200"\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—à—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"')
    await States.add_statement.set()
    await state.set_data({'message_id': call.message.message_id})


def confirmation_inline_keyboard() -> InlineKeyboardMarkup:
    confirmation_btn = InlineKeyboardButton(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ {Icon.CHECK.value}',
                                            callback_data='check')
    return InlineKeyboardMarkup().add(confirmation_btn)


def mark_inline_keyboard(event_id) -> InlineKeyboardMarkup:
    one_star_btn = InlineKeyboardButton(Icon.STAR.value, callback_data=f'{event_id}:mark:1')
    two_star_btn = InlineKeyboardButton(Icon.TWO_STAR.value, callback_data=f'{event_id}:mark:2')
    three_star_btn = InlineKeyboardButton(Icon.THREE_STAR.value, callback_data=f'{event_id}:mark:3')
    four_star_btn = InlineKeyboardButton(Icon.FOUR_STAR.value, callback_data=f'{event_id}:mark:4')
    five_star_btn = InlineKeyboardButton(Icon.FIVE_STAR.value, callback_data=f'{event_id}:mark:5')
    return InlineKeyboardMarkup(row_width=2).add(one_star_btn, two_star_btn, three_star_btn, four_star_btn,
                                                 five_star_btn)


def comment_inline_keyboard() -> InlineKeyboardMarkup:
    write_comment_btn = InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='add_comment')
    cancel_btn = InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_comment')
    return InlineKeyboardMarkup(row_width=2).add(write_comment_btn, cancel_btn)


def student_main_inline_keyboard() -> InlineKeyboardMarkup:
    get_schedule = InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='get_schedule')
    notification_settings = InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data='notification_settings')
    return InlineKeyboardMarkup(row_width=2).add(get_schedule, notification_settings)


async def add_statement(message: Message, state: FSMContext):
    """–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏"""
    try:
        split = message.text.split()
        name = split[0]
        surname = split[1]
        patronymic = split[2]
        group_name = split[3]
        if not re.match(pattern='[–∞-—è–ê-–Ø]{3}-\d{3}', string=group_name):
            raise Exception(f'–ì—Ä—É–ø–ø–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {group_name}')
    except Exception as e:
        logger.error(e)
        await message.bot.send_message(message.chat.id, '–ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–∞–ø–æ–ª–Ω–∏, –ø–æ —Ñ–æ—Ä–º–µ!\n'
                                                        '–ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ü—Ä–ò-201"')
        return
    data: dict = await state.get_data('message_id')
    await message.bot.edit_message_text(
        text=f'–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\n\n–§–∞–º–∏–ª–∏—è: {surname}\n–ò–º—è: {name}\n–û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}\n–≥—Ä—É–ø–ø–∞: {group_name}',
        chat_id=message.chat.id,
        message_id=data['message_id'],
        reply_markup=create_statement_inline_keyboard())
    await States.send_statement.set()
    await state.finish()
    await state.set_data(
        {'user_data': Statement(name=name, surname=surname, patronymic=patronymic, group_name=group_name)})


def create_statement_inline_keyboard() -> InlineKeyboardMarkup:
    create_statement_btn = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚û°', callback_data='send_statement')
    # back_btn = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel_statement')
    return InlineKeyboardMarkup(row_width=2).add(create_statement_btn)


async def callback_query_send_statement(call: CallbackQuery, state: FSMContext):
    """–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏"""
    await call.message.edit_text(text='–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ' + Icon.CHECK.value)
    data = await state.get_data('user_data')
    statement: Statement = data['user_data']
    # logger.info(f'user id: {call.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É')
    await rabbit.send_message_to_user_service(
        f'{{"method": "ADD_STATEMENT", "body": {{ "id": {call.message.chat.id}, "name": "{statement.name}", "surname": "{statement.surname}", "patronymic": "{statement.patronymic}", "groupName": "{statement.group}" }} }}')
    # await state.finish()


def send_comment_inline_keyboard() -> InlineKeyboardMarkup:
    send = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚û°', callback_data='send_comment')
    cancel_sending = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel_comment')
    return InlineKeyboardMarkup(row_width=2).add(send, cancel_sending)


async def add_comment(call: CallbackQuery, state):
    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–æ–±—ã—Ç–∏–µ')
    await States.comment.set()


async def parse_comment(message: Message, state: FSMContext):
    await message.edit_text(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?',
                            reply_markup=send_comment_inline_keyboard())
    comment = message.text
    logger.info(f'user id: {message.from_user.id} —Å–ø–∞—Ä—Å–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')


async def callback_query_help(call: CallbackQuery):
    await help_message(call.message)
    logger.info(f'user id: {call.from_user.id} /help')


async def callback_query_mark(call: CallbackQuery):
    await call.message.edit_text(
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏ –Ω–∞–∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"',
        reply_markup=comment_inline_keyboard())

    split = call.data.split(':')
    grade = int(split[-1])
    event_id = int(split[0])
    await rabbit.send_message_to_event_service(f'{{ "method": "ADD_GRADE", '
                                               f'"body": {{ '
                                               f'"event_id": {event_id}, '
                                               f'"grade": {grade} '
                                               f'}}'
                                               f'}}')


async def callback_query_send_comment(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ' + Icon.CHECK.value,
                                 # reply_markup=student_main_inline_keyboard()
                                 )
    # await state.finish()
    await States.comment.set()
    logger.info(f'user id: {call.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')


async def callback_query_cancel_comment(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–û—Ç–∫–∞–∑ –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
                                 # reply_markup=student_main_inline_keyboard()
                                 )
    await state.finish()
    logger.info(f'user id: {call.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')


async def callback_query_confirmation_of_notification(call: CallbackQuery):
    logger.info(f'user id: {call.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')


async def callback_query_cancel_statement(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        text=f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ '
             f'–±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ –æ –≥–ª–∞–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞. –ù–∞–∂–º–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" –∏'
             f' –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É.', reply_markup=start_inline_keyboard())
    await state.finish()
    logger.info(f'user id: {call.from_user.id} /–Ω–∞–∑–∞–¥')


async def callback_query_confirmation_of_notification(call: CallbackQuery):
    event_id = call.data[13:]
