import datetime
import logging
import os

import redis
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from interface.statement import Statement
from model.lesson import Lesson
from repositories.schedule_repository.redis_schedule_repository import RedisScheduleCacheRepository
from repositories.user_repository.redis_repository import RedisUserCacheRepository
from services.group_service.grpc_group_service import GrpcGroupService
from services.schedule_service.grpc_schedule_service import GrpcScheduleService
from services.schedule_service.proxy_cache_schedule_service import ProxyCacheScheduleRepository
from services.schedule_service.schedule_service import ScheduleService
from services.user_service.grpc_user_service import GrpcUserService
from services.user_service.proxy_cached_user_service import ProxyCachedUserService
from services.user_service.user_service import UserService

logger = logging.getLogger()
from aiogram.dispatcher import FSMContext

from rabbit.rabbitmq import instance_rabbit_client as rabbit
from interface.Icon import *
from interface.States import *

import re

user_service: UserService = ProxyCachedUserService(user_service=GrpcUserService(GrpcGroupService()),
                                                   repository=RedisUserCacheRepository(
                                                       redis.Redis(host=os.environ['REDIS_HOST'],
                                                                   port=int(os.environ['REDIS_PORT']),
                                                                   db=0)))

schedule_service: ScheduleService = ProxyCacheScheduleRepository(GrpcScheduleService(),
                                                                 RedisScheduleCacheRepository(
                                                                     redis.Redis(host=os.environ['REDIS_HOST'],
                                                                                 port=int(os.environ['REDIS_PORT']),
                                                                                 db=0)
                                                                 ))


async def start_message(message: Message):
    """—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        if user_service.is_student(message.chat.id):
            await message.answer(f'–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=student_button())
        else:
            await message.answer(
                f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ '
                f'–±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ –æ –≥–ª–∞–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞. –ù–∞–∂–º–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" –∏'
                f' –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É.', reply_markup=start_inline_keyboard())
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            await rabbit.send_message_to_user_service(
                f'{{"method": "ADD_USER", "body": {{ "username": "{message.chat.username}", "id": {message.chat.id} }} }}')
    except Exception as e:
        logger.error(e)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


# logger.info(f'user id: {message.from_user.id} /start')


def start_inline_keyboard() -> InlineKeyboardMarkup:
    create_statement_btn = InlineKeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ üóé', callback_data='create_statement')
    help_btn = InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')
    return InlineKeyboardMarkup(row_width=2).add(create_statement_btn, help_btn)


async def help_message(message: Message):
    """—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –∫–æ–º–∞–Ω–¥ /help"""
    try:
        if user_service.is_student(message.chat.id):
            await message.answer(f'–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=student_button())
        else:
            await message.answer(f'–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=help_inline_keyboard())
    except Exception as e:
        logger.error(e)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    # logger.info(f'user id: {message.from_user.id} /help')


async def callback_query_help(call: CallbackQuery):
    await help_message(call.message)
    # logger.info(f'user id: {call.from_user.id} /help')


def help_inline_keyboard() -> InlineKeyboardMarkup:
    create_statement_btn = InlineKeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', callback_data='create_statement')
    iit_contacts = InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã –ò–ò–¢', url='https://iit.csu.ru/')
    return InlineKeyboardMarkup(row_width=2).add(create_statement_btn, iit_contacts)


def cancel_statement_inline_keyboard() -> InlineKeyboardMarkup:
    cancel_statement = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel_statement')
    return InlineKeyboardMarkup().add(cancel_statement)


async def callback_query_statement(call: CallbackQuery, state: FSMContext):
    """–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"""
    await call.message.edit_text(
        text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø–∞".\n–ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω '
             '–ò–≤–∞–Ω–æ–≤–∏—á –ü—Ä–ò-200"\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—à—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"')
    await call.message.edit_reply_markup(reply_markup=cancel_statement_inline_keyboard())
    await States.add_statement.set()
    await state.set_data({'message_id': call.message.message_id})


def confirmation_inline_keyboard(event_id: int) -> InlineKeyboardMarkup:
    confirmation_btn = InlineKeyboardButton(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ {Icon.CHECK.value}',
                                            callback_data=f'check:{event_id}')
    return InlineKeyboardMarkup().add(confirmation_btn)


async def add_statement(message: Message, state: FSMContext):
    """–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏"""
    try:
        split = message.text.split()
        name = split[1]
        surname = split[0]
        patronymic = split[2]
        group_name = split[3]
        if not re.match(pattern='[–∞-—è–ê-–Ø]{2,3}-\d{3}', string=group_name):
            raise Exception(f'–ì—Ä—É–ø–ø–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {group_name}')
    except Exception as e:
        logger.error(e)
        await message.bot.send_message(message.chat.id, '–ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–∞–ø–æ–ª–Ω–∏, –ø–æ —Ñ–æ—Ä–º–µ!\n'
                                                        '–ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ü—Ä–ò-201"')
        return
    data: dict = await state.get_data('message_id')
    await message.bot.edit_message_text(
        text=f'–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\n\n–§–∞–º–∏–ª–∏—è: {surname}\n–ò–º—è: {name}\n–û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}\n–≥—Ä—É–ø–ø–∞: {group_name}',
        chat_id=message.chat.id,
        message_id=data['message_id'],
        reply_markup=create_statement_inline_keyboard())
    await States.send_statement.set()
    await state.finish()
    await state.set_data(
        {'user_data': Statement(name=name, surname=surname, patronymic=patronymic, group=group_name).toJSON()})


def create_statement_inline_keyboard() -> InlineKeyboardMarkup:
    create_statement_btn = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚û°', callback_data='send_statement')
    cancel_statement = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel_statement')
    return InlineKeyboardMarkup(row_width=1).add(create_statement_btn, cancel_statement)


async def callback_query_send_statement(call: CallbackQuery, state: FSMContext):
    """–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏"""
    await call.message.edit_text(text='–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ' + Icon.CHECK.value)
    data = await state.get_data('user_data')
    statement: Statement = Statement.fromJSON(data['user_data'])
    # logger.info(f'user id: {call.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É')
    await rabbit.send_message_to_user_service(
        f'{{"method": "ADD_STATEMENT", "body": '
        f'{{ "id": {call.message.chat.id}, '
        f'"name": "{statement.name}", '
        f'"surname": "{statement.surname}", '
        f'"patronymic": "{statement.patronymic}", '
        f'"groupName": "{statement.group}" }} '
        f'}}')
    # await state.finish()


async def callback_query_mark(call: CallbackQuery):
    """–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    split = call.data.split(':')
    grade = int(split[-1])
    event_id = int(split[0])
    await call.message.edit_text(
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ —Å–æ–±—ã—Ç–∏–∏',
        reply_markup=comment_inline_keyboard(event_id))
    await rabbit.send_message_to_event_service(f'{{ "method": "ADD_GRADE", '
                                               f'"body": {{ '
                                               f'"event_id": {event_id}, '
                                               f'"grade": {grade} '
                                               f'}}'
                                               f'}}')


def mark_inline_keyboard(event_id) -> InlineKeyboardMarkup:
    """–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
    one_star_btn = InlineKeyboardButton(Icon.STAR.value, callback_data=f'{event_id}:mark:1')
    two_star_btn = InlineKeyboardButton(Icon.TWO_STAR.value, callback_data=f'{event_id}:mark:2')
    three_star_btn = InlineKeyboardButton(Icon.THREE_STAR.value, callback_data=f'{event_id}:mark:3')
    four_star_btn = InlineKeyboardButton(Icon.FOUR_STAR.value, callback_data=f'{event_id}:mark:4')
    five_star_btn = InlineKeyboardButton(Icon.FIVE_STAR.value, callback_data=f'{event_id}:mark:5')
    return InlineKeyboardMarkup(row_width=2).add(one_star_btn, two_star_btn, three_star_btn, four_star_btn,
                                                 five_star_btn)


def comment_inline_keyboard(event_id: int) -> InlineKeyboardMarkup:
    write_comment_btn = InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç.', callback_data=f'add_comment:{event_id}')
    cancel_btn = InlineKeyboardButton('–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å', callback_data='cancel_comment')
    return InlineKeyboardMarkup(row_width=2).add(write_comment_btn, cancel_btn)


async def add_comment(call: CallbackQuery, state: FSMContext):
    event_id = int(call.data.split(':')[-1])
    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ‚úç')
    await state.set_data({'event_id': event_id, 'message_id': call.message.message_id})
    await States.comment.set()


async def callback_query_edit_comment(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    States.edit_comment.set()
    message_id = call.message.message_id
    await state.set_data({'message_id': message_id})


async def edit_comment(message: Message, state: FSMContext):
    data = await state.get_data('message_id')
    message_id = data['message_id']
    await message.bot.edit_message_text(text=message.text, chat_id=message.chat.id,
                                        message_id=message_id, reply_markup=send_comment_inline_keyboard())


async def parse_comment(message: Message, state: FSMContext):
    message_id: dict = await state.get_data('message_id')
    event_id: dict = await state.get_data('event_id')
    await message.bot.edit_message_text(text=f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?',
                                        message_id=message_id['message_id'],
                                        chat_id=message.chat.id,
                                        reply_markup=send_comment_inline_keyboard())
    # await state.set_state(States.comment)
    await state.finish()
    await state.set_data({'event_id': event_id['event_id'], 'message_text': message.text})


def send_comment_inline_keyboard() -> InlineKeyboardMarkup:
    send = InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚û°', callback_data='send_comment')
    cancel_sending = InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='cancel_comment')
    return InlineKeyboardMarkup(row_width=2).add(send, cancel_sending)


async def callback_query_cancel_comment(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–û—Ç–∫–∞–∑ –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
    await state.finish()
    # logger.info(f'user id: {call.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')


async def callback_query_send_comment(call: CallbackQuery, state: FSMContext):
    data = await state.get_data('event_id')
    event_id = data['event_id']
    message_text = data['message_text']
    await call.message.edit_text(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ' + Icon.CHECK.value)
    await state.finish()
    await rabbit.send_message_to_event_service(
        f'{{ "method": "ADD_FEEDBACK", "body": {{ "event_id": {event_id}, "text": "{message_text}" }} }}')


async def callback_query_cancel_statement(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        text=f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ '
             f'–±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ –æ –≥–ª–∞–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞. –ù–∞–∂–º–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ" –∏'
             f' –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É.', reply_markup=start_inline_keyboard())
    await state.finish()
    # logger.info(f'user id: {call.from_user.id} /–Ω–∞–∑–∞–¥')


async def callback_query_check_notification(call: CallbackQuery):
    event_id = call.data.split(':')[-1]
    await call.message.edit_text(call.message.text)
    await rabbit.send_message_to_event_service(
        f'{{ "method": "CHECK_EVENT", "body": {{ "event_id": {event_id}, "user_id": "{call.from_user.id}" }} }}')


def student_button() -> InlineKeyboardMarkup:
    schedule_btn = InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='get_schedule')
    return InlineKeyboardMarkup(row_width=2).add(schedule_btn)


async def callback_get_schedule(call: CallbackQuery):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
    await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è', callback_data='schedule_today'),
        InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞', callback_data='schedule_tomorrow'),
        InlineKeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é', callback_data='schedule_week')))


async def callback_get_schedule_today(call: CallbackQuery):
    try:
        student = user_service.get_student_by_user_id(user_id=call.message.chat.id)
        schedule = schedule_service.get_schedule_today(group_id=student.group_id)
        today_schedule_str = format_today_lesson_list(schedule)
        await call.bot.send_message(chat_id=call.message.chat.id,
                                    text=f'<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n{today_schedule_str}')
    except Exception as e:
        logger.error(e)
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


async def callback_get_schedule_tomorrow(call: CallbackQuery):
    try:
        student = user_service.get_student_by_user_id(user_id=call.message.chat.id)
        schedule = schedule_service.get_schedule_tomorrow(group_id=student.group_id)
        tomorrow_schedule_str = format_tomorrow_lesson_list(schedule)
        await call.bot.send_message(chat_id=call.message.chat.id,
                                    text=f'<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n\n{tomorrow_schedule_str}')
    except Exception as e:
        logger.error(e)
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


async def callback_get_schedule_week(call: CallbackQuery):
    try:
        student = user_service.get_student_by_user_id(user_id=call.message.chat.id)
        schedule = schedule_service.get_schedule_on_week(group_id=student.group_id)
        week_schedule_str = format_week_lesson(schedule)
        await call.bot.send_message(chat_id=call.message.chat.id,
                                    text=f'<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>{week_schedule_str}')
    except Exception as e:
        logger.error(e)
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')


def format_week_lesson(schedule: dict[str, list[Lesson]]):
    lessons = str()
    for day in schedule:
        lessons += f'\n\n<b>[  <u>{format_day_name(day)}</u>  ]</b>\n'
        for lesson in schedule[day]:
            lessons += (f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {lesson.title}\n'
                        f'<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è</b>: {lesson.auditorium}\n'
                        f'<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>: {lesson.teacher}\n'
                        f'<b>–ù–∞—á–∞–ª–æ –ø–∞—Ä—ã</b>: {lesson.time_start.strftime("%H:%M")}\n'
                        f'<b>–ö–æ–Ω–µ—Ü –ø–∞—Ä—ã</b>: {lesson.time_end.strftime("%H:%M")}')

    return lessons


def format_today_lesson_list(schedule: list[Lesson]):
    lessons = str()
    now = datetime.datetime.now().time()
    for lesson in schedule:
        if lesson.time_start <= now <= lesson.time_end:
            lessons += '<b>[  <u>–ò–¥–µ—Ç —Å–µ–π—á–∞—Å</u>  ]</b>\n'
        lessons += (f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {lesson.title}\n'
                    f'<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è</b>: {lesson.auditorium}\n'
                    f'<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>: {lesson.teacher}\n'
                    f'<b>–ù–∞—á–∞–ª–æ –ø–∞—Ä—ã</b>: {lesson.time_start.strftime("%H:%M")}\n'
                    f'<b>–ö–æ–Ω–µ—Ü –ø–∞—Ä—ã</b>: {lesson.time_end.strftime("%H:%M")}\n')

    return lessons


def format_tomorrow_lesson_list(schedule: list[Lesson]):
    lessons = str()
    for lesson in schedule:
        lessons += (f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {lesson.title}\n'
                    f'<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è</b>: {lesson.auditorium}\n'
                    f'<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>: {lesson.teacher}\n'
                    f'<b>–ù–∞—á–∞–ª–æ –ø–∞—Ä—ã</b>: {lesson.time_start.strftime("%H:%M")}\n'
                    f'<b>–ö–æ–Ω–µ—Ü –ø–∞—Ä—ã</b>: {lesson.time_end.strftime("%H:%M")}\n')

    return lessons


def format_day_name(day_name):
    if day_name == 'MONDAY':
        return '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    elif day_name == 'TUESDAY':
        return '–í—Ç–æ—Ä–Ω–∏–∫'
    elif day_name == 'WEDNESDAY':
        return '–°—Ä–µ–¥–∞'
    elif day_name == 'THURSDAY':
        return '–ß–µ—Ç–≤–µ—Ä–≥'
    elif day_name == 'FRIDAY':
        return '–ü—è—Ç–Ω–∏—Ü–∞'
    elif day_name == 'SATURDAY':
        return '–°—É–±–±–æ—Ç–∞'
    elif day_name == 'SUNDAY':
        return '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    else:
        return day_name
